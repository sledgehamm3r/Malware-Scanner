using System;
using System.Drawing;
using System.IO;
using System.Security;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace MalwareScanner
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }

        private void browseButton_Click(object sender, EventArgs e)
        {
            using (var folderDialog = new FolderBrowserDialog())
            {
                DialogResult result = folderDialog.ShowDialog();
                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(folderDialog.SelectedPath))
                {
                    folderTextBox.Text = folderDialog.SelectedPath;
                }
            }
        }

        private void startButton_Click(object sender, EventArgs e)
        {
            string folderPath = folderTextBox.Text;

            if (!Directory.Exists(folderPath))
            {
                MessageBox.Show("This Folder does not exist", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            RichTextBox resultBox = new RichTextBox();
            resultBox.Size = new Size(600, 600);
            resultBox.WordWrap = false;

 
            string[] files = Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories);
            foreach (string file in files)
            {
                try
                {
                    string[] lines = File.ReadAllLines(file);


                    foreach (string line in lines)
                    {
                        if (ContainsSimilarMalware(line))
                        {
                            resultBox.AppendText($"Potential malware found in file: {file}, Line: {Array.IndexOf(lines, line) + 1}" + Environment.NewLine);
                            break; 
                        }
                    }


                    malwareListBox.Items.Add(file);
                }
                catch (UnauthorizedAccessException)
                {
                    resultBox.AppendText($"No Permission to view the file: {file}" + Environment.NewLine);
                }
                catch (IOException)
                {
                    resultBox.AppendText($"Error reading the file: {file}" + Environment.NewLine);
                }
                catch (SecurityException)
                {
                    resultBox.AppendText($"Security Error on file: {file}" + Environment.NewLine);
                }
            }


            Form resultForm = new Form();
            resultForm.Text = "Scan-Result";
            resultForm.Size = new Size(600, 600);

            resultForm.Controls.Add(resultBox);

            resultForm.StartPosition = FormStartPosition.CenterScreen;

            resultForm.ShowDialog();
        }

        private bool ContainsSimilarMalware(string line)
        {
            string[] malwarePatterns = {
                "PerformHttpRequest",
                "load(d)",
                "random_char",
                "Enchanced_Tabs",
                "helpCode",
                "assert(load(",
                "\\\\x[0-9a-fA-F]{2}",
                "\x50\x65\x72\x66\x6f\x72\x6d\x48\x74\x74\x70\x52\x65\x71\x75\x65\x73\x74",

            };


            foreach (string pattern in malwarePatterns)
            {
                if (IsSimilar(line, pattern))
                {
                    return true; 
                }
            }

            return false; 
        }

        private bool IsSimilar(string line, string pattern)
        {
            int distance = ComputeLevenshteinDistance(line, pattern);

            int threshold = Math.Min(line.Length, pattern.Length) / 2;

            return distance <= threshold;
        }

        private int ComputeLevenshteinDistance(string s, string t)
        {

            int[,] d = new int[s.Length + 1, t.Length + 1];

            for (int i = 0; i <= s.Length; i++)
            {
                d[i, 0] = i;
            }

            for (int j = 0; j <= t.Length; j++)
            {
                d[0, j] = j;
            }

            for (int j = 1; j <= t.Length; j++)
            {
                for (int i = 1; i <= s.Length; i++)
                {
                    if (s[i - 1] == t[j - 1])
                    {
                        d[i, j] = d[i - 1, j - 1];
                    }
                    else
                    {
                        d[i, j] = Math.Min(
                            Math.Min(d[i - 1, j] + 1, d[i, j - 1] + 1),
                            d[i - 1, j - 1] + 1
                        );
                    }
                }
            }

            return d[s.Length, t.Length];
        }

        private void creditsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Developer: Ronny Riggs (sledge.dev)\nDiscord: sledge_hamm3r", "Credits", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void donationsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://ko-fi.com/sledgedev");
        }
    }
}
